OBJECTS = import_dataset.o mersenne.o userintf.o main.o globals.o DBScan.o qsort.o schedule.o GPU.o kernel.o cluster.o
CC = nvcc
FLAGS = -std=c++11 -L/usr/local/cuda-7.0/lib64 -I/usr/local/cuda/include -O3 -Xcompiler -fopenmp -arch=compute_30 -code=sm_30 -lcuda
NTHREADS = -DNTHREADS=1 
				#IN THE PIPELINE (SEARCHMODE=7) N-1 CONSUME THE NEIGHBORTABLES FOR DBSCANING, AND 1 THREAD
				#DOES THE GPU WORK (BUT THIS ACTUALLY SPAWNS 3 THREADS)
				#IN SEARCHMODE=8, THIS IS THE NUMBER OF THREADS THAT CONSUME THE NEIGHBORTABLES FOR
				#DBSCAN
				#THE NUMBER OF THREADS SHOULDNT BE MORE THAN THE NUMBER OF EXPERIMENTS + 1

SEARCHMODE = -DSEARCHMODE=2 	

				#0- BRUTE FORCE GPU- NO BATCHING
				#1- GLOBAL MEMORY GRID KERNEL - NO BATCHING
				#2- SHARED MEMORY GRID KERNEL - NO BATCHING
				#3- [DEPRECATED] GLOBAL MEMORY GRID KERNEL - BATCHING 
				#4- [EXAMPLE CODE]GENERATE ONE TABLE FROM ANOTHER TABLE - EXAMPLE
				#5- [WE DONT USE THIS] GENERATE ONE MASTER TABLE AND THE REST OF THE INSTANCES USE IT FILTERING THE HIGHER EPSILON VALUES
				#6- [DEPRECATED] - FULL PIPLINE - HAS NEIGHBORTABLES WITH VECTORS	
				#7- FULL PIPELINE- WITH NEW NEIGHBORTABLE MADE WITH PTRS TO ARRAYS
					#USES THE TABLEFROMPREVIOUS PARAMETER	
				#8- ONE NEIGHBORTABLE WITH SINGLE EPSILON, DBSCAN WITH DIFFERENT MINPTS
				#9- [INCOMPLETE] SHARED MEMORY WITH DATA AWARE - NO BATCHING	
				#10- [NEEDS VALIDATION] PROTOTYPE CPU GRID VS. CPU BRUTE FORCE TOTAL NEIGHBORS 	

PARAMS= -DNUM_TRIALS=4 -DBLOCKSIZE=256 -DTABLEFROMPREVIOUS=0

#NUM TRIALS IS 2 BECAUSE WE THROW OUT THE FIRST ONE TO WARM UP THE GPU -- WILL CAUSE A DIVISION BY 0 WARNING WHEN COMPILING IF 1 TRIAL

all:
	$(CC) $(FLAGS) -c $(NTHREADS) $(SEARCHMODE) $(PARAMS) qsort.cpp schedule.cpp DBScan.cpp userintf.cpp mersenne.cpp import_dataset.cpp globals.cpp GPU.cu kernel.cu cluster.cpp
	$(CC) $(FLAGS) -c $(NTHREADS) $(SEARCHMODE) $(PARAMS) main.cu 
	$(CC) $(FLAGS) $(OBJECTS) -o main 

clean:
	rm main

